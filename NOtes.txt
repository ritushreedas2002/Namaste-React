-------------------------------------------------EPISODE 1--------------------------------------------------------------------------------
CDN LINKS FOR REACT:
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script type="module" src="./app.js"></script>

CDN :    "CDN" stands for Content Delivery Network. CDNs are networks of distributed servers
that work together to deliver web content, such as images, stylesheets, JavaScript files, and other assets

crossorigin: 
1. Browser security rule preventing requests to different domains.
2. to request the browser to fetch such resources 
with CORS (Cross-Origin Resource Sharing) headers. (Mechanism allowing servers to specify resource access permissions.)

NOTE: The order of the links should be maintained
-----
LINK 1: USE : Suitable for development environments with useful warnings and error messages for developers. 
It includes extra checks and debugging information.

LINK2 : USE :  Used in development environments along with React. It includes additional functionality related to 
rendering React components in the DOM.



-------------------------------------------------EPISODE 2--------------------------------------------------------------------------------

//React.createElement=>Object=>HTML

npm install -D parcel  //-D is a flag for dev dependency
npm -package  
dependency- The dependencies object specifies the packages that you need to run your code.


dependency---1.dev dependency (in development phase)   2. normal dependency (in development phase + production phase)
^-caret (automatic minor upgrades e.g. version 2.8.3 to 2.8.4)
~-tilde (for major upgrades e.g. 2.8.3 to 3.0.0)


package.json - mainly the version of packages that the npm is handling (also the changes from minor to major) (configuration for our npm)
package-lock.json - keeps track of the exact version of all the dependencies
node modules-data base or collection of dependencies


npm install parcel (beast)
we need parcel-->parcel depends on its other dependencies-->this nesting of dependencies is known as a transitive dependency


.gitignore---blocks all those files mentioned in it from uploading into the git repo (contains all the files that I don't want to push into GitHub)

We should not put the node modules into the production (no need to upload them)
that is why package.json and package-lock.json are necessary to be uploaded (because they maintain a note of all those dependencies our project needs), as they help in regenerating the required node modules for our project
we just need to do "npm install" and it will recreate all those node modules for us

npx parcel indexReact.html --will provide a server for our app
npx - executing a package


cdn links are not a preferred way to bring React and ReactDOM into our project - as it is a network-costly operation and React version control becomes difficult
"npm install" is the same as "npm i"

Features of Parcel--
-creates a Dev Build for you
-creates a Local server for you
-does HMR = Hot Module Replacement (exchanges, adds, or removes modules while an application is running, without a full reload)
-this HMR is done by File Watching Algorithm - written in C++
-does Caching (in .parcel-cache folder)- which provides Faster Builds 
-does Image optimization
-does Minification which is essential for production build
-does Bundling
-does Compressing
-does Consistent Hashing
-does Code Splitting for you
-gives Differential Bundling to our app (so that our app runs smoothly on older browser versions as well)
-gives Diagnostics of our app
-provides good error handling (better error suggestions)
-HTTPS
-does Tree Shaking Algorithm -  analyze the import, and export of each module, and remove everything that isn't used
-different dev and prod bundles

"npx parcel indexReact.html"
when you write this, it generates a development build of your project and hosts it into port:1234 (which comes from the "dist" folder)

when we refresh the page or save files, it uses the ".parcel-cache" and "dist" folders to update the webpage using HMR

The "dist" and the ".parcel-cache" folders can be automatically generated on each build, thus they are not required to be put into GitHub

you can create a production build in the following way-
"npx parcel build indexReact.html"
//this will build a bundle(or minify), and it will put all those files into a new folder i.e. "dist" folder (that are production-ready files for the app)
//note: before writing this, from package.json delete the "main" key (else there may be a conflict)

** Local project does not directly connect with the Server
** Local pushes its code into the git (like package.json & package-lock.json is pushed and not the node-modules)
** Server then fetches the code from the git (fetches the package.json & package-lock.json to create the node-modules)
** The Server then hosts the code to the end-user
** The copy of node-modules in the Local is different from the copy of node-modules in the Server

inside package.json we configure browserslist(this tells about all the systems our app is compatible with):-
browserslist:[
    "last 2 Chrome versions",
    "last 2 Firefox versions"
] //the last 2 versions of Chrome and Firefox will definitely support our app
* "last 2 versions" - this will cover the last 2 versions of all the systems

-------------------------------------------------EPISODE 3--------------------------------------------------------------------------------

we can configure the scripts in the package.json:-
scripts are industry standards to shorten repetitive codes for starting/building our project
"scripts": {
    "start": "parcel indexReact.html",    [DEVELOPEMENT PHASE]
    "build": "parcel build indexReact.html"
  },

we can use the scripts in the terminal as follows:-
  npm run start or npm start are the same
  but npm build will not work like this, you need to write npm run build

** React.createElement => creates a ReactElement which is a JS Object => when we render this, the ReactDOM converts it into an HTMLElement and pushes it into the browser (and replaces everything from that DOM element if there was anything earlier)

 a. const parent1 = React.createElement("div", { id: "parent" },"HII")
  it isn't easy to create elements like this
  so JSX came into play -- a convention where HTML and JS are merged into one file  (JSX and React are not related to each other, e.g.- "JSX is a part of React" this statement is wrong)
** JSX is not "HTML inside Javascript"
   it is simply an "HTML-like syntax" or "XML-like syntax"
 b. const parent1 = <h1 id="parent"> HII </h1>;  //here parent1 is a React element
a. is a React element created using React, b. is a React element created using JSX (both these are the same thing)
b. is not pure JavaScript, our browser does not understand JSX
  ES6(ECMAScript) is what the JS engine understands   
  so Parcel does the whole thing that is JSX is transpiled before it reaches the JS engine (this JSX is converted into the code that our browser or the React can understand)
    but Parcel is not doing the transpilation by itself, it is putting another package called Babel (another JS library, Babel is a JS compiler) into work for this purpose
Parcel is a manager of Babel

During transpilation, internally the JSX is converted into a React.createElement done by Babel, and further methods are followed as usual

const heading=<h1 id="heading" className="hello">hii everyone</h1>; //this is not HTML, in HTML the attribute is "class", whereas that same attribute in JSX is "className"
** If you have to give an attribute in JSX, you have to write it in camelcase, in HTML we write tabindex="1" in JSX we write tabIndex="1"
const  root=ReactDOM.createroot(document.getElementById("root"));
root.render(heading);

for multiline JSX code, you have to wrap it inside parentheses(), in order to help Babel understand where JSX is starting and ending
const heading=(<h1 id="heading" className="hello">
hii everyone
</h1>);


//components   
1. Class-based components - old way (uses JS classes)
2. Functional components - new way (uses JS functions) //normal javascript function which returns some JSX element

const h1 = ()=>{
    return <h1 className="heading"> Namaste React Functional Component </h1>;
};

const h2 = ()=> <h1 className="heading"> Namaste React Functional Component </h1>;

const h3 = ()=> (
    <h1 className="heading"> Namaste React Functional Component </h1>
);
** h1,h2,h3 are the same React component

//Component Composition
component inside another Component


//const data=api.getData();
const Heading = ()=>{
    return <div id="root">
        {data}   
        <h1>HII EVERYONE</h1>
    </div>;
};

cross-site scripting is the attack technique if js allows every one to access ur code 
then it can steat ur local storage,cookies,read data

jsx takes care of injection, it this malicious api passes data to ur code jsx jst escapes it (sanitizing the data)

-------------------------------------------------EPISODE 4--------------------------------------------------------------------------------

INLINE STYLING takes js object
--------------------------------------

const stylecard={
    background-color:"yellow";
}

const Body = () => {
  return (
    <div className='body'>
      <div className='search'>Search</div>
      <div className='res-container' style={stylecard}>  //objects can be writtern within curly braces
        <RestCard />
      </div>
    </div>
  );
}

<div className='res-container' style={{background-color:"yellow";}}>
//first { } taking js and second { } is the js obj 

----REAL DATA is in JSON format----------

Conflict driven UI-open swiggy ->offers available in benguluru,kol all are different
so for not building diff UI for different places

Conflict comes from backend
---------------JSON------------------
{
"employee": {
"name": "sonoo",
"salary": 56000,
"married": true.
}
}
-----------------------------------------

swiggy api:https://www.swiggy.com/dapi/restaurants/list/v5?lat=12.9351929&lng=77.62448069999999&page_type=DESKTOP_WEB_LISTING

DURING USING MAP:
--------------------
we need to write key to uniquely identify the elements:

                  CONTAINER  
  ---------------------------------------                     
     |               |                |
1.component1    2.component2    3.component3
suppose you want to insert a component before component1 this is where key is important
key is also important as it will not re-render everything again,

When React renders a list of elements, it needs a way to uniquely identify each item in the list. The key prop provides 
a hint to React about the identity of each element. This is especially important when the list can dynamically change, such as 
when items are added or removed.

data.map((rest,index) => (
    <ResCard key={index} data={rest} />   //key is to identify each card as unique
))
//INDEX is not recommended by React itself

-------------------------------------------------EPISODE 5--------------------------------------------------------------------------------
src folder-has the source code
in src folder

ALL hard coded data like links and dummy data are placed in another folder called utils

Types of EXPORT/IMPORT 
1.default (Components)
-------export default (name)
--------import (name) from './filename'

2.Named (multiple exports)
--------export const name=
--------export const name2=
--------import {name} from './filename'


Default export can be done with the named export in thsi format:---------------
// Named export
export const myFunction = () => {
  // ... function implementation
};

// Default export
const MyComponent = () => {
  // ... component implementation
};

export default MyComponent;

onClick takes a call back function 
----------
onClick{()=>{}}


REACT HOOKS  (//import from react as a named import)

NOTE:when we change a normal variable it does not affect the UI so we use the hooks
are normal js function given by react which have super powers used for DOM manipulation
these are the utility function given by react.The two imp hooks are :useState() and useEffect()

useState()-basically gives u super power react variable  keeps sync of data layer and UI layer
const [listOfRestaurants, setListOfRestaurants] = useState(reslist);
           |                     |                         |
        default            what to be placed           default value[array of objects]
                           when an event occurs

setListOfRestaurants(filteredList);
means that listOfRestaurants=filteredList; after onCLick eventListerner

this will filter out those restaurants having rating more than 4 and sets the listOfRestaurants
This is called re-rendering. When a state variable changes react re-renders its omponents. As soon as the list of restaurants updates,
 react will very quickly removes the past data and updates with the new data.

 const arr=useState(reslist);     //array destructuring//useState is returning an array
 const listOfRestaurants=arr[0];
 const setListOfRestaurants=arr[1];

  

Reconciliation Algorithm(React Fibre)
------------------------------------------

Actual DOM              Virtual DOM is the representation of the actual DOM, it is nothing but an js object
<div>
  <div>
    <h1/>
  </div>
</div>

DIFF Algorithm
-----------------

It will actually cal the difference between the previous obj and the updated obj then it actuallys  changes the DOM and
renders it at every render cycle. whenever there is a change in state variable there is a change in DOM and react re-renders.

React is fast-> because it does efficient DOM manipulation-> in Virtual DOM

--------------------------------------------------------------EPISODE 6--------------------------------------------------------------------------------

Architecture---
------------------

1.MONOLITH Architecture (Suppose this is a JAVA PROJECT and we are doing everything in that project)

----------------------
| API   UI     AUTH   |  (JAVA PROJ)  (only writtern in java)
| DB     SMS          |
|---------------------|

2.MICROSERVICES

Different services for diff jobs    
---------------------------|
|                          |
|  |API|     |UI|   |DB|   |(theses services are independent of each other and interacts in some use cases)
|                          |     (ALl these small application are performed separately following separatio  of concerns (single responsibility principle))
|   |AUTH|   |SMS|         |
| ---------------- ------- |

HOW do these services interact with each other?
these services interact with each other through diff cases. They make call to diff microservices.
Our react project comes into UI  microservices. ADVANTAGE: is that UI can be writtern in react, backend can be writtern in mongodb 
so  mainly diff microservices can be writtern in different languages. They run in their own ports. eg UI:1234 , Backend:1022 and all these
ports are mapped to their domain name.  


TWO APPROACHES OF API CALL :
---------------------------------
1.
LOADS --> API CALL(takes 500ms)-->Renders it in UI
(as soon as the page loads we make an api call ,the api response and we render it )
(poor user experience as we need to wait for 500ms)

2.
LOADS --> RENDERS -->API CALL --->RE-RENDERS
(as soon as the page loads we render it then we make an api call ,the api response and we re-renders it )
(Best approach)

useEffect() hook 
-------------------------
it takes two arguments 1.callback function 2.dependency array
As teh body loads it loads the whole body as the render cycle gets over, it calls its callback function.(useEffect gets called after the component
has been rendered)

eg.
-----
useEffect(()=>{
  console.log("HII");
},[]);
 console.log("Ritu");

 console
 ----------
 Ritu
 HII

CORS: mainly our browser or local host restricts the use of another host

how to find api? : go to website ->inspect->network->click on fetch option->left side column api are given

Suppose instead of showing Loading page while the api does response and re-renders we can show shimmer UI which is basically the shadow of the whole
original UI.

const [button,setbutton]=useState("Login");
how const variable is changes?
so when we setbutton actually react ensures to find the diff between the previous vitual DOM and the modified virtual DOM and then re-renders the 
component once again, so again a new button variable is created with the modified value.

const [searchtext, setsearchtext] = useState("");
<input type='text' className='search-box' value={searchtext}></input>   
to keep track of the input we need to bind it with the local state variable .
NOTE: when at each keystroke the nothing shows in input text this is because .... the value is bind to seacrtext and the value is bind to input type
so at at change the value still remain ""

so we need to add onChange event handler :---that as the input changes we are changing the seachtext value
at each key stroke the react component gets render again and again
whenever a state variable updates,react tru=iggers a recoincilation cycle.

NOTE:
-------
const [listOfRestaurants, setListOfRestaurants] = useState([]);
const [filteredlistOfRestaurants, setfilteredListOfRestaurants] = useState([]);

we are keeping intact the main list of restaurants that is listOfRestaurants and on every change we are manipulating filteredlistOfRestaurants
so that the main list of restaurants keeps intact

--------------------------------------------------------------EPISODE 7--------------------------------------------------------------------------------
